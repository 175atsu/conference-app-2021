package io.github.droidkaigi.feeder.data

import com.pinterest.ktlint.main
import io.github.droidkaigi.feeder.Media
import kotlinx.datetime.Instant
import kotlin.test.Ignore
import kotlin.test.Test

class GenerateFakeContents {
    @Ignore
    @Test
    fun generate() = runBlocking {
        val feedList = fakeFeedApi()
            .fetch()
            .sortedBy { it.publishedAt }
        val code = "" +
            "fun fakeFeedContents(): FeedContents {\n" +
            "    return FeedContents(\n" +
            "        // Generated by GenerateFakeContents.kt\n" +
            "        feedContents = listOf(" + build(feedList) + "),\n" +
            "        favorites = setOf()\n" +
            "    )" +
            "}" +
            ""
        System.setIn(code.byteInputStream())
        main(arrayOf("--stdin", "--experimental", "--android", "-F"))
    }

    private fun build(value: Any): String {
        return when (value) {
            is List<*> -> {
                value.joinToString { build(it!!) }
            }
            is Number -> {
                value.toString()
            }
            is String -> {
                literalize(value)
            }
            is Instant -> {
                "Instant.fromEpochMilliseconds(" + value.toEpochMilliseconds() + ")"
            }
            is Media -> value::class.qualifiedName!!
            else -> {
                val kClass = value::class
                val primaryConstructor = kClass.constructors.toList()[0]
                kClass.qualifiedName + "(" +
                    primaryConstructor.parameters.joinToString(",\n") { parameter ->
                        parameter.name + "=" + build(
                            kClass.members.first { member ->
                                parameter.name == member.name
                            }.call(value)!!
                        )
                    } + ")"
            }
        }
    }

    private fun literalize(value: Any): String {
        val valueString = value.toString()
        if (valueString.lines().size > 1) {
            return "\"\"\"" + valueString + "\"\"\""
        }
        return "\"" + valueString + "\""
    }
}
